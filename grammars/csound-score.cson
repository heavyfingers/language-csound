'scopeName': 'source.csound-score'
fileTypes: ['sco']
name: 'Csound Score'
patterns: [
  {
    include: '#commentsAndMacroCalls'
  }
  {
    name: 'meta.statement.csound-score'
    begin: '([abefimq-tv-z]|[nN][pP]?)|([{}])'
    beginCaptures:
      1:
        name: 'keyword.control.csound-score'
      2:
        name: 'punctuation.csound-score'
    end: '\\n'
    patterns: [
      {
        include: '#commentsAndMacroCalls'
      }
      {
        include: '#partialExpressions'
      }
    ]
  }
]
repository:
  comments:
    # This must be kept synchronized with both the Csound Document and Csound
    # Orchestra grammars.
    patterns: [
      {
        name: 'comment.block.csound-score'
        begin: '/\\*'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.begin.csound-score'
        end: '\\*/'
        endCaptures:
          0:
            name: 'punctuation.definition.comment.end.csound-score'
      }
      {
        name: 'comment.line.csound'
        begin: '//|;'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.line.csound-score'
        end: '(?=\\n)'
      }
    ]
  commentsAndMacroCalls:
    patterns: [
      {
        include: '#comments'
      }
      {
        include: '#macroCalls'
      }
    ]
  macroCalls:
    # This must be kept synchronized with the Csound Orchestra grammar.
    patterns: [
      {
        name: 'entity.name.function.preprocessor.csound-score'
        match: '\\$\\w+(?:\\.|\\b)'
      }
    ]
  partialExpressions:
    patterns: [
      { # These must be kept synchronized with the Csound Orchestra grammar.
        name: 'keyword.preprocessor.csound-score'
        match: '\\#(?:(?:e(?:lse|nd(?:if)?)|i(?:fn?def|nclude)|undef)\\b|\\#\\#)|@+[ \\t]*\\d*'
      }
      { # These must be kept synchronized with the Csound Orchestra grammar.
        begin: '\\#[ \\t]*define\\b'
        beginCaptures:
          0:
            name: 'keyword.define.preprocessor.csound-score'
        end: '(?<=\\#)'
        patterns: [
          {
            include: '#commentsAndMacroCalls'
          }
          {
            name: 'entity.name.function.preprocessor.csound-score'
            match: '\\w+'
          }
          {
            begin: '\\('
            end: '\\)'
            patterns: [
              {
                name: 'variable.parameter.preprocessor.csound-score'
                match: '\\w+\\b'
              }
            ]
          }
          {
            begin: '\\#'
            beginCaptures:
              0:
                name: 'punctuation.definition.macro.begin.csound-score'
            end: '\\#'
            endCaptures:
              0:
                name: 'punctuation.definition.macro.end.csound-score'
            patterns: [
              {
                include: '$self'
              }
            ]
          }
        ]
      }
      { # These must be kept synchronized with the Csound Orchestra grammar.
        name: 'constant.numeric.float.csound-score'
        match: '(?:\\d+e[+-]?\\d+)|(?:\\d+\\.\\d*|\\d*\\.\\d+)(?:e[+-]?\\d+)?'
      }
      { # These must be kept synchronized with the Csound Orchestra grammar.
        name: 'constant.numeric.integer.hexadecimal.csound-score'
        match: '0[Xx][a-fA-F0-9]+'
      }
      { # These must be kept synchronized with the Csound Orchestra grammar.
        name: 'constant.numeric.integer.decimal.csound-score'
        match: '\\d+'
      }
      {
        name: 'string.quoted.csound-score'
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.csound-score'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.csound-score'
        patterns: [
          {
            include: '#macroCalls'
          }
        ]
      }
    ]
